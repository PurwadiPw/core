<?php

namespace App\Modules\__module__\Http\Controllers;

use App\Http\Controllers\Controller;
use App\Http\Requests;
use Collective\Html\FormFacade as Form;
use Auth;
use DB;
use Datatables;
use Illuminate\Http\Request;
use Pw\Core\Facades\Theme;
use Pw\Core\Models\Crud;
use Pw\Core\Models\CrudFields;
use Validator;

use App\Modules\__module__\Models\__model_name__;

class __controller_class_name__ extends Controller
{
	public $show_action = true;
	public $view_col = '__view_column__';
	public $listing_cols = ['id', __listing_cols__];

    public function __construct()
    {
        // Field Access of Listing Columns
        if (\Pw\Core\Helpers\CoreHelper::laravel_ver() == 5.4) {
            $this->middleware(function ($request, $next) {
                $this->listing_cols = CrudFields::listingColumnAccessScan('__crud_name__', $this->listing_cols);
                return $next($request);
            });
        } else {
            $this->listing_cols = CrudFields::listingColumnAccessScan('__crud_name__', $this->listing_cols);
        }
    }

    /**
     * Display a listing of the __crud_name__.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $crud = Crud::get('__crud_name__');

        if (Crud::hasAccess($crud->id)) {
            return Theme::view('default::core.__view_folder__.index', [
                'show_actions' => $this->show_action,
                'listing_cols' => $this->listing_cols,
                'crud'         => $crud,
            ]);
        } else {
            return redirect(config('core.adminRoute') . "/");
        }
    }

    /**
     * Show the form for creating a new __singular_var__.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
    	if (Crud::hasAccess("__crud_name__", "create")) {
			$crud = Crud::get('__crud_name__');

            $returnHTML = Theme::view('default::core.__view_folder__.opr.create', [
                'crud'     => $crud,
                'view_col' => $this->view_col,
            ])->render();

            return response()->json([
                'success'  => true,
                'msg' => 'Single Data',
                'html'     => $returnHTML,
            ]);
    	}else{

    	}
    }

    /**
     * Store a newly created __singular_var__ in database.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        if (Crud::hasAccess("__crud_name__", "create")) {

            $rules = Crud::validateRules("__crud_name__", $request);

            $validator = Validator::make($request->all(), $rules);

            if ($validator->fails()) {
            	$ok = false;
            	$messages = $validator->messages();
            }

            $insert_id = Crud::insert("__crud_name__", $request);

            $ok = true;
            $messages = 'Berhasil';

        } else {
            $ok = false;
            $messages = 'Anda tidak mempunyai akses "Create Data"';
        }
        return response()->json([
        	'ok' => $ok,
        	'msg' => $messages
        ]);
    }

    /**
     * Display the specified __singular_var__.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        if (Crud::hasAccess("__crud_name__", "view")) {
            $__singular_var__ = __crud_name__::find($id);
            if (isset($__singular_var__->id)) {
                $crud      = Crud::get('__crud_name__');
                $crud->row = $__singular_var__;

                $returnHTML = Theme::view('default::core.__view_folder__.opr.read', [
                    'crud'       => $crud,
                    'view_col'   => $this->view_col,
                ])->with('__singular_var__', $__singular_var__)->render();

                return response()->json([
                    'success'  => true,
                    'msg' => 'Single Data',
                    'html'     => $returnHTML,
                ]);
            } else {
	            return response()->json([
	                'success'  => false,
	                'msg' => 'Single Data',
	                'html'     => '',
	            ]);
            }
        } else {
            return response()->json([
                'success'  => false,
                'msg' => 'Single Data',
                'html'     => '',
            ]);
        }
    }

    /**
     * Show the form for editing the specified __singular_var__.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        if (Crud::hasAccess("__crud_name__", "edit")) {
            $__singular_var__ = __crud_name__::find($id);
            if (isset($__singular_var__->id)) {
                $crud = Crud::get('__crud_name__');

                $crud->row = $__singular_var__;

                $returnHTML = Theme::view('default::core.__view_folder__.opr.update', [
                    'crud'     => $crud,
                    'view_col' => $this->view_col,
                ])->with('__singular_var__', $__singular_var__)->render();

                return response()->json([
                    'success'  => true,
                    'msg' => 'Single Data',
                    'html'     => $returnHTML,
                ]);
            } else {
                return response()->json([
                    'success'  => false,
                    'msg' => 'Single Data',
                    'html'     => '',
                ]);
            }
        } else {
            return response()->json([
                'success'  => false,
                'msg' => 'Single Data',
                'html'     => '',
            ]);
        }
    }

    /**
     * Update the specified __singular_var__ in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        if (Crud::hasAccess("__crud_name__", "edit")) {

            $rules = Crud::validateRules("__crud_name__", $request, true);

            $validator = Validator::make($request->all(), $rules);

            if ($validator->fails()) {
            	$ok = false;
            	$messages = $validator->messages();
            }

            $insert_id = Crud::updateRow("__crud_name__", $request, $id);

            $ok = true;
            $messages = 'Berhasil';
        } else {
            $ok = false;
            $messages = 'Anda tidak mempunyai akses "Update Data"';
        }
        return response()->json([
        	'ok' => $ok,
        	'msg' => $messages
        ]);
    }

    /**
     * Remove the specified __singular_var__ from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function delete($id)
    {
        if (Crud::hasAccess("__crud_name__", "delete")) {
        	$__singular_var__ = __crud_name__::find($id);
            if (isset($__singular_var__->id)) {
                $crud = Crud::get('__crud_name__');

                $crud->row = $__singular_var__;

                $returnHTML = Theme::view('default::core.__view_folder__.opr.delete', [
                    'crud'     => $crud,
                    'view_col' => $this->view_col,
                ])->with('__singular_var__', $__singular_var__)->render();

                return response()->json([
                    'success'  => true,
                    'msg' => 'Single Data',
                    'html'     => $returnHTML,
                ]);
            } else {
                $ok = false;
                $messages = 'Data tidak ditemukan';
            }
        } else {
            $ok = false;
            $messages = 'Anda tidak mempunyai akses "Delete Data"';
        }
        return response()->json([
            'ok' => $ok,
            'msg' => $messages
        ]);
    }

    /**
     * Remove the specified __singular_var__ from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id, Request $req)
    {
        if (Crud::hasAccess("__crud_name__", "delete")) {
        
	        if (is_array($req->id)) {
	        	__crud_name__::whereIn('id', $req->id)->delete();
	        	
	        	$ok = true;
	        	$messages = 'Berhasil';
	        }else{
	            __crud_name__::find($id)->delete();

	            $ok = true;
	            $messages = 'Berhasil';
	        }
        } else {
            $ok = false;
            $messages = 'Anda tidak mempunyai akses "Delete Data"';
        }
        return response()->json([
        	'ok' => $ok,
        	'msg' => $messages
        ]);
    }

    /**
     * Datatable Ajax fetch
     *
     * @return
     */
    public function dtajax()
    {
        $values = DB::table('__db_table_name__')->select($this->listing_cols)->whereNull('deleted_at');
        $out    = Datatables::of($values)->make();
        $data   = $out->getData();

        $fields_popup = CrudFields::getCrudFields('__crud_name__');

        for ($i = 0; $i < count($data->data); $i++) {
            for ($j = 0; $j < count($this->listing_cols); $j++) {
                $col = $this->listing_cols[$j];
                if ($fields_popup[$col] != null && starts_with($fields_popup[$col]->popup_vals, "@")) {
                    $data->data[$i][$j] = CrudFields::getFieldValue($fields_popup[$col], $data->data[$i][$j]);
                }
                if ($col == $this->view_col) {
                    $data->data[$i][$j] = '<a href="' . url(config('core.adminRoute') . '/__singular_var__/' . $data->data[$i][0]) . '">' . $data->data[$i][$j] . '</a>';
                }
            }
        }

        $out->setData($data);
        return $out;
    }

    public function openTab(Request $req)
    {
        $input = $req->all();
        if ($req->isMethod('post') && $req->ajax()) {
            if ($input['dataId'] || ($input['dataId'] == '0')) {
                if (is_array($input['dataId'])) {
                    return response()->json([
                        'success'  => true,
                        'msg' => 'Delete multiple',
                        'html'     => false,
                    ]);
                } else {
                	$id = $input['dataId'];
                	switch ($input['act']) {
                		case 'create':
                			return $this->create();
                		break;

                		case 'read':
                			return $this->show($id);
                		break;

                		case 'update':
                			return $this->edit($id);
                		break;

                		case 'delete':
                			return $this->delete($id);
                		break;

                		case 'audit':
                			return response()->json([
		                        'success'  => true,
		                        'msg' => 'Audit'
		                    ]);
                		break;
                	}
                }
            }
        }
    }
}